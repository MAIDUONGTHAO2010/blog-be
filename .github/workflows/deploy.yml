name: Deploy to Develop

on:
  push:
    branches:
    - develop

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Stop existing Docker containers
      run: |
        echo "Stopping Docker containers..."
        docker-compose down || true
        docker system prune -f || true

    - name: Create .env file from .env.example
      run: |
        echo "Creating .env file from .env.example..."
        cp .env.example .env

    - name: Get environment variables from AWS Parameter Store
      run: |
        echo "Fetching environment variables from AWS Parameter Store..."

        # Define parameter paths - adjust these according to your parameter store structure
        PARAM_PREFIX="/blog-app"

        # Get all parameters with the prefix
        aws ssm get-parameters-by-path \
          --path "$PARAM_PREFIX" \
          --recursive \
          --with-decryption \
          --query 'Parameters[*].[Name,Value]' \
          --output text > params.txt

        # Process each parameter and update .env file
        while IFS=$'\t' read -r name value; do
          # Extract the key name from the parameter path
          # e.g., /blog-app/DB_HOST -> DB_HOST
          key=$(echo "$name" | sed "s|^$PARAM_PREFIX/||")
          
          # Escape special characters in value for sed
          escaped_value=$(echo "$value" | sed 's/[[\.*^$()+?{|]/\\&/g')
          
          # Update the .env file
          if grep -q "^${key}=" .env; then
            # Key exists, update it
            sed -i "s|^${key}=.*|${key}=${escaped_value}|" .env
            echo "Updated ${key}"
          else
            # Key doesn't exist, append it
            echo "${key}=${escaped_value}" >> .env
            echo "Added ${key}"
          fi
        done < params.txt

        # Clean up
        rm params.txt

        echo "Environment variables updated successfully"

    - name: Display .env file (masked sensitive data)
      run: |
        echo "Current .env file contents (sensitive values masked):"
        sed 's/=.*/=***/' .env

    - name: Start Docker containers
      run: |
        echo "Starting Docker containers..."
        docker-compose docker-compose-deploy.yml up -d

    - name: Wait for containers to be ready
      run: |
        echo "Waiting for containers to be ready..."
        sleep 30

        # Check if containers are running
        docker-compose ps

    - name: Install Composer dependencies and setup Laravel
      run: |
        echo "Installing Composer dependencies..."
        docker-compose exec -T blog_be_app composer install --no-dev --optimize-autoloader

        echo "Generating application key..."
        docker-compose exec -T blog_be_app php artisan key:generate --force

        echo "Dumping autoload..."
        docker-compose exec -T blog_be_app composer dump-autoload --optimize

        echo "Running database migrations..."
        docker-compose exec -T blog_be_app php artisan migrate --force

        echo "Running database seedings..."
        docker-compose exec -T blog_be_app php artisan db:seed --force

        echo "Clearing and caching config..."
        docker-compose exec -T blog_be_app php artisan optimize:clear

    - name: Health check
      run: |
        echo "Performing health check..."

        # Wait a bit more for the application to be fully ready
        sleep 10

        # Check if the application is responding
        max_attempts=5
        attempt=1

        while [ $attempt -le $max_attempts ]; do
          echo "Health check attempt $attempt..."
          
          if curl -f http://localhost:${APP_PORT:-80}/health || curl -f http://localhost:${APP_PORT:-80}; then
            echo "Application is healthy!"
            break
          else
            echo "Health check failed, attempt $attempt/$max_attempts"
            if [ $attempt -eq $max_attempts ]; then
              echo "Health check failed after $max_attempts attempts"
              docker-compose logs blog_be_app
              exit 1
            fi
            sleep 10
            ((attempt++))
          fi
        done

    - name: Display container status
      run: |
        echo "Final container status:"
        docker-compose ps

        echo "Application logs:"
        docker-compose logs --tail=10 blog_be_app

    - name: Cleanup on failure
      if: failure()
      run: |
        echo "Deployment failed, showing logs for debugging..."
        docker-compose logs
        docker-compose down
